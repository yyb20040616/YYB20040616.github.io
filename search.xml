<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客搭建</title>
    <url>/2023/05/28/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="关于使用github-hexo进行博客搭建"><a href="#关于使用github-hexo进行博客搭建" class="headerlink" title="关于使用github+hexo进行博客搭建"></a>关于使用github+hexo进行博客搭建</h1><p>本次搭建需要git和js的环境，接下来按照步骤讲一下:</p>
<h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><p>官方下载地址：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p>
<p>注意需安装windows-64版本的，在安装好后，直接一路点击next即可，所有的都是默认的（也包括添加到PATH）</p>
<p><img src="/boke/git.png"></p>
<p>安装后验证: 在 cmd 中输入命令 node -v, 查看 Node 版本</p>
<h2 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h2><p>官方下载地址：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p>同样安装好后一路直接点击next即可</p>
<p>安装好后就可输入node-v，查看Node版本</p>
<h2 id="安装并初始化hexo"><a href="#安装并初始化hexo" class="headerlink" title="安装并初始化hexo"></a>安装并初始化hexo</h2><p>执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo     # 通过npm安装hexo</span><br></pre></td></tr></table></figure>

<p>其中，-g 指定全局安装，之后可以在任意位置使用 hexo 命令<br>接下来，进入到你要放博客的静态文件的位置，右键，选择 Git Bash Here，打开 Git Bash 之后，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init blog      # 初始化创建，会在你所在位置创建 blog 文件夹</span><br><span class="line">cd blog             # 进入 blog 目录</span><br><span class="line">npm install         # 进一步安装hexo所需文件</span><br></pre></td></tr></table></figure>

<p>等待 hexo 安装完成。。。<br>安装完成后，会出现一下这些文件夹以及文件</p>
<p><img src="/boke/%E5%AE%89%E8%A3%85hexo.png"></p>
<p>其中 source 就是存放后面我们写博客的源文件的文件夹<br>接下来输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean          # 清除所有记录</span><br><span class="line">hexo generate       # 生成静态网页</span><br><span class="line">hexo s              # 本地访问</span><br></pre></td></tr></table></figure>

<p><img src="/boke/%E6%9C%AC%E5%9C%B0%E8%AE%BF%E9%97%AE.png"></p>
<p>访问其中域名，会出现下图：</p>
<p><img src="/boke/%E6%9C%AC%E5%9C%B0%E8%AE%BF%E9%97%AE2.png"></p>
<h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p>如果你不喜欢现在的主题样式可以选择换一个，首先是 <a href="https://hexo.io/themes/">官方主题</a>，可以在里面下载自己喜欢的主题。<br>个人现在使用的是 <a href="https://github.com/litten/hexo-theme-yilia">hexo-theme-yilia</a>。<br>这里就以这个主题为例：<br>先按 Ctrl + C,断开刚刚的服务，然后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>

<p>下载后的主题在 themes 里面，如图：</p>
<p><img src="/boke/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE.png"></p>
<p>回到 blog 文件夹，用记事本打开 <code>_config.yml</code> ,修改里面的 <code>theme: landscape</code> 为 <code>theme: yilia</code><br>之后重新输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean          # 清除所有记录</span><br><span class="line">hexo generate       # 生成静态网页</span><br><span class="line">hexo s              # 本地访问</span><br></pre></td></tr></table></figure>

<p>再访问上面那个本地网址，就可以看到主题已经切换了</p>
<h2 id="解决图片路径问题"><a href="#解决图片路径问题" class="headerlink" title="解决图片路径问题"></a>解决图片路径问题</h2><p>由于 Gitee 和 Github 不太一样，并且 hexo 3.0 之后获取 url 的方式也不一样了，所以为了解决图片的路径问题，我们需要先安装一个插件，先按 Ctrl + C,断开刚刚的服务，然后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install git+https://gitee.com/Kaiter-Plus/hexo-asset-image --save  #安装 hexo-asset-image 插件</span><br></pre></td></tr></table></figure>

<p>如果安装失败请用下面的命令进行安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/7ym0n/hexo-asset-image --save  #安装 hexo-asset-image 插件</span><br></pre></td></tr></table></figure>

<p>接下来还需要修改一下 _config.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line">post_asset_folder: true</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>之后你只需要学博客是输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new test       # test就是新博客文章的名字</span><br></pre></td></tr></table></figure>

<p>就会在 <code>source/_posts</code> 下，会同时生成test目录和test.md 网页，将需要的图片放置到test目录下，test.md就可以正常解析了。如图：</p>
<p><img src="/boke/%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98.png"></p>
<h2 id="配置SSH-KEY"><a href="#配置SSH-KEY" class="headerlink" title="配置SSH KEY"></a>配置SSH KEY</h2><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的 github 权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。<br>先输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh #检查本机是否已存在的ssh密钥</span><br></pre></td></tr></table></figure>

<p>如果提示：<code>No such file or directory</code> 说明你是第一次使用git。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure>

<p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录（C:\用户\你的用户名\），找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，右上角进入设置 -&gt; SSH公钥</p>
<p><img src="/boke/SSH.png"></p>
<p>在新的SSH密钥那里将我们上面复制的内容粘贴进去即可</p>
<h2 id="测试SSH连接是否成功"><a href="#测试SSH连接是否成功" class="headerlink" title="测试SSH连接是否成功"></a>测试SSH连接是否成功</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com  #注意，&#x27;T&#x27;是大写的</span><br></pre></td></tr></table></figure>

<p>如果提示Are you sure you want to continue connecting (yes&#x2F;no)?，输入yes，然后会看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi 你的github用户名! You’ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>看到这个信息说明SSH已配置成功！<br>接下来还需要配置用户名和邮箱：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot;  #你的 github 用户名，即注册时的用户名，个人主页最大那个就是了</span><br><span class="line">git config --global user.email  &quot;xxx@qq.com&quot;  #填写你的github注册邮箱</span><br></pre></td></tr></table></figure>

<h2 id="github上创建相关库"><a href="#github上创建相关库" class="headerlink" title="github上创建相关库"></a>github上创建相关库</h2><p>接下来讲讲怎么在github上创建相关库</p>
<p><img src="/boke/%E5%88%9B%E5%BB%BA%E7%9B%B8%E5%85%B3%E5%BA%93.png"></p>
<p><img src="/boke/%E5%88%9B%E5%BB%BA%E7%9B%B8%E5%85%B3%E5%BA%932.png"></p>
<p>在1的地方填写库名，一定是用户名.github.io</p>
<p>将2的地方勾上，再点击创建即可</p>
<h2 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h2><p>如果你一切都配置好了，发布上传很容易，一句 <code>hexo d</code> 就搞定，当然关键还是你要把所有东西配置好。<br>首先，ssh key肯定要配置好。<br>其次，配置_config.yml中有关deploy的部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/用户名/仓库名  #仓库的地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p><code>_config.yml</code>这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。<br>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p>
<p>接下来我们还需要安装一个插件，在 git bash 下输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>这下就搞定啦</p>
]]></content>
  </entry>
  <entry>
    <title>vulhub搭建</title>
    <url>/2023/06/02/vulhub%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="vulhub靶场搭建及使用"><a href="#vulhub靶场搭建及使用" class="headerlink" title="vulhub靶场搭建及使用"></a>vulhub靶场搭建及使用</h1><h2 id="1-进行系统更新"><a href="#1-进行系统更新" class="headerlink" title="1.进行系统更新"></a>1.进行系统更新</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo su			             进入超级用户</span><br><span class="line">apt-get update                更新系统，防止后面安装时报错</span><br><span class="line">apt-get upgrade               更新软件包</span><br><span class="line">apt-get dist-upgrade          更新系统版本。如果你对新版本软件的需求不是那么迫切，可以不执行</span><br></pre></td></tr></table></figure>

<p>这几步几乎每次都会用，很常见，就不放图片了</p>
<h2 id="2-安装https协议及AC证书"><a href="#2-安装https协议及AC证书" class="headerlink" title="2.安装https协议及AC证书"></a>2.安装https协议及AC证书</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install -y apt-transport-https ca-certificates</span><br></pre></td></tr></table></figure>

<p><img src="/vulhub/vulhub%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A6.png"></p>
<h2 id="3-下载安装docker"><a href="#3-下载安装docker" class="headerlink" title="3.下载安装docker"></a>3.下载安装docker</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install docker.io</span><br></pre></td></tr></table></figure>

<p><img src="/vulhub/vulhub%E5%AE%89%E8%A3%85docker.png"></p>
<h2 id="4-查看docker安装是否成功"><a href="#4-查看docker安装是否成功" class="headerlink" title="4.查看docker安装是否成功"></a>4.查看docker安装是否成功</h2><p>Docker自带一个hello-world环境，我们可以启动这个环境，测试docker功能是否正常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run hello-world </span><br></pre></td></tr></table></figure>

<p><img src="/vulhub/vulhub%E9%AA%8C%E8%AF%81docker%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png"></p>
<h2 id="5-查看docker的各项基本信息"><a href="#5-查看docker的各项基本信息" class="headerlink" title="5.查看docker的各项基本信息"></a>5.查看docker的各项基本信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看Docker版本</span><br><span class="line">docker -v </span><br><span class="line">#启动docker环境</span><br><span class="line">systemctl start docker</span><br><span class="line">#显示所有的容器，包括未运行的容器</span><br><span class="line">docker ps -a</span><br><span class="line">#显示运行的容器</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p><img src="/vulhub/%E6%9F%A5%E7%9C%8Bdocker%E5%90%84%E9%A1%B9%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF.png"></p>
<h2 id="6-安装pip-3"><a href="#6-安装pip-3" class="headerlink" title="6.安装pip-3"></a>6.安装pip-3</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install python3-pip </span><br></pre></td></tr></table></figure>

<h2 id="7-安装Docker-Compose"><a href="#7-安装Docker-Compose" class="headerlink" title="7.安装Docker-Compose"></a>7.安装Docker-Compose</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install docker-compose</span><br></pre></td></tr></table></figure>

<p>6和7两步因为已经安装好了，图片没什么参考价值，输入安装命令后直接进行安装即可</p>
<h2 id="8-查看docker-compose版本"><a href="#8-查看docker-compose版本" class="headerlink" title="8.查看docker-compose版本"></a>8.查看docker-compose版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose -v</span><br></pre></td></tr></table></figure>

<p><img src="/vulhub/vulhub%E6%9F%A5%E7%9C%8Bdocker-compose%E7%89%88%E6%9C%AC.png"></p>
<h2 id="9-安装vulhub靶场"><a href="#9-安装vulhub靶场" class="headerlink" title="9.安装vulhub靶场"></a>9.安装vulhub靶场</h2><p><strong>注意：是进入的~目录下面，进入之后进行如下命令执行（这里只是本人将其放在该目录下面，也可自行选择）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://gitee.com/puier/vulhub.git</span><br></pre></td></tr></table></figure>

<p><img src="/vulhub/vulhub%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F.png"></p>
<h2 id="10-随便进入一个靶场目录"><a href="#10-随便进入一个靶场目录" class="headerlink" title="10.随便进入一个靶场目录"></a>10.随便进入一个靶场目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root/vulhub/weblogic/CVE-2017-10271</span><br></pre></td></tr></table></figure>

<p><strong>注意：这里如果前面所下载的目录不是用户目录，就自行更改路径</strong></p>
<p><img src="/vulhub/vulhub%E8%BF%9B%E5%85%A5%E9%9D%B6%E5%9C%BA%E7%9B%AE%E5%BD%95.png"></p>
<p>也可进入root&#x2F;vulhub&#x2F;weblogic之后执行如下命令进入靶场（以CVE-2017-10271为例）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd CVE-2017-10271</span><br></pre></td></tr></table></figure>

<h2 id="11-对靶场进行编译"><a href="#11-对靶场进行编译" class="headerlink" title="11.对靶场进行编译"></a>11.对靶场进行编译</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose build</span><br></pre></td></tr></table></figure>

<p><img src="/vulhub/vulhub%E7%BC%96%E8%AF%91%E9%9D%B6%E5%9C%BA%E7%8E%AF%E5%A2%83.png"></p>
<h2 id="12-运行此靶场"><a href="#12-运行此靶场" class="headerlink" title="12.运行此靶场"></a>12.运行此靶场</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p><img src="/vulhub/vulhub%E8%BF%90%E8%A1%8C%E9%9D%B6%E5%9C%BA.png"></p>
<h2 id="13-查看启动环境"><a href="#13-查看启动环境" class="headerlink" title="13.查看启动环境"></a>13.查看启动环境</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose ps -a</span><br></pre></td></tr></table></figure>

<p><img src="/vulhub/vulhub%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8E%AF%E5%A2%83.png"></p>
<p>就表示是在虚拟机域名下的7001端口（虚拟机域名直接ifconfig即可）</p>
<h2 id="14-通过浏览器进行访问"><a href="#14-通过浏览器进行访问" class="headerlink" title="14.通过浏览器进行访问"></a>14.通过浏览器进行访问</h2><p><img src="/vulhub/vulhub%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE.png"></p>
<p><strong>注意：本题页面就是404，并不是无法访问的意思</strong></p>
<h2 id="15-关闭此靶场环境"><a href="#15-关闭此靶场环境" class="headerlink" title="15.关闭此靶场环境"></a>15.关闭此靶场环境</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>后续再想打开靶场，只需要重复10-14步即可</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/05/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
